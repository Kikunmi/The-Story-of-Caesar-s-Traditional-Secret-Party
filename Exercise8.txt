# Exercise ðŸ“‹

You are given the below code:

```jsx
const friend = "BRUTUS";
const shiftValue = 3;
const alphabet = "abcdefghijklmnopqrstuvwxyz";
```

Incorporate the following steps into a single JavaScript file, placing the provided code at the top. Insert your answers to the questions as comments where they appear.

## Step 1 ðŸ§©

Create a function named `encryptLetter` that takes a letter and a shift value as parameters. This function should return the encrypted version of the letter.

### Hint ðŸ’¡

- Inside the function, find the index of the letter in the alphabet.
- Add the shift value to this index.
- Use the modulus operator to ensure wrapping around the alphabet if necessary.
- Return the encrypted letter.

### Answer ðŸ”‘

```jsx
function encryptLetter (letter, shift)
{
  const index = alphabet.indexOf(letter.toLowerCase());
  const newIndex = (index + shift) % alphabet.length;
  return alphabet[newIndex];
}
```

## Step 2 ðŸ§©

Create a function named `encryptMessage` that takes a word and a shift value as parameters. This function should return the encrypted version of the entire word.

### Hint ðŸ’¡

- Use a loop to iterate over each letter in the word.
- For each letter, call the `encryptLetter` function.
- Construct the encrypted message.
- Return the encrypted message.

### Answer ðŸ”‘

```jsx
function encryptMessage (word, shift)
{
  let encryptedMessage = "";
  for (let i = 0; i < word.length; i++)
  {
    encryptedMessage += encryptLetter(word[i], shift);
  }
  return encryptedMessage;
}
```

## Step 3 ðŸ§©

Create a function named `decryptLetter` that takes an encrypted letter and a shift value as parameters. This function should return the decrypted version of the letter.

### Hint ðŸ’¡

- Inside the function, find the index of the letter in the alphabet.
- Subtract the shift value from this index.
- Use the modulus operator to ensure wrapping around the alphabet if necessary. Remember to handle negative values correctly.
- Return the decrypted letter.

### Answer ðŸ”‘

```jsx
function decryptLetter (letter, shift)
{
  const index = alphabet.indexOf(letter.toLowerCase());
  const newIndex = (index - shift + alphabet.length) % alphabet.length;
  return alphabet[newIndex];
}
```

## Step 4 ðŸ§©

Create a function named `decryptMessage` that takes an encrypted word and a shift value as parameters. This function should return the decrypted version of the entire word.

### Hint ðŸ’¡

- Use a loop to iterate over each letter in the word.
- For each letter, call the `decryptLetter` function.
- Construct the decrypted message.
- Return the decrypted message.

### Answer ðŸ”‘

```jsx
function decryptMessage (word, shift)
{
  let decryptedMessage = "";
  for (let i = 0; i < word.length; i++)
  {
    decryptedMessage += decryptLetter(word[i], shift);
  }
  return decryptedMessage;
}
```

## Question ðŸ¤”

If Caesar encrypts the word "BRUTUS" using our `encryptMessage` function and then decrypts the result using our `decryptMessage` function, will he get "BRUTUS" back? Why or why not?

### Answer ðŸ”‘

Yes, Caesar will get "BRUTUS" back. The decryption function is the inverse of the encryption function. When applied sequentially, they cancel each other out, restoring the original message.