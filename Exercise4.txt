# Exercise ðŸ“‹

You are given the below code:

```jsx
const emblemClue1 = "Eagle";
const emblemClue2 = "Laurel";
const emblemClue3 = 7;

```

Use the knowledge you've gained on program logic and flow to perform the following steps. Add your answers to the questions as comments where they appear.

## Step 1 ðŸ§©

Use a series of `if`, `else if`, and `else` statements to decipher the first clue.

- If `emblemClue1` is "Eagle", the location starts with "Forum".
- If `emblemClue1` is "Lion", the location starts with "Colosseum".
- Otherwise, the location starts with "Villa".

### Answer ðŸ”‘

```jsx
let locationStart = "";

if (emblemClue1 === "Eagle")
{
  locationStart = "Forum";
}
else if (emblemClue1 === "Lion")
{
  locationStart = "Colosseum";
}
else
{
  locationStart = "Villa";
}

```

## Step 2 ðŸ§©

Use boolean logic to decipher the second clue.

- If `emblemClue2` is "Laurel" AND the first location is "Forum", append " of Augustus" to the location.
- If `emblemClue2` is "Grapes" OR the first location is "Villa", append " of Pompey" to the location.

### Answer ðŸ”‘

```jsx
if (emblemClue2 === "Laurel" && locationStart === "Forum")
{
  locationStart += " of Augustus";
}
else if (emblemClue2 === "Grapes" || locationStart === "Villa")
{
  locationStart += " of Pompey";
}

```

## Step 3 ðŸ§©

Use the switch statement to decipher the third clue.

- Depending on the value of `emblemClue3`, append a direction to the location.
    - 7 is "North"
    - 3 is "South"
    - 9 is "East"
    - 4 is "West"

### Answer ðŸ”‘

```jsx
switch (emblemClue3)
{
  case 7:
    locationStart += " North";
    break;
  case 3:
    locationStart += " South";
    break;
  case 9:
    locationStart += " East";
    break;
  case 4:
    locationStart += " West";
    break;
}

```

## Question ðŸ¤”

Why is it important to be careful when using `==` (double equals) instead of `===` (triple equals) in our conditionals?

### Answer ðŸ”‘

Using `==` (double equals) performs type coercion, meaning it tries to convert the operands to the same type before making the comparison. On the other hand, `===` (triple equals) checks both the value and the type, ensuring a stricter equality check. Using `==` can lead to unexpected results in certain situations due to type coercion.