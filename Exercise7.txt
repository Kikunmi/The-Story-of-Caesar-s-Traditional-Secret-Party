# Exercise ðŸ“‹

You are given the below code.

```jsx
const friend = "BRUTUS"
const shiftValue = 3;
```

Your objective is to encrypt the name "BRUTUS" using the Caesar Cipher technique and loops. Remember, we did it once for "B". Now, it's time to apply all letters.

Use the following steps in a JavaScript file, placing the given code at the top. Place your answers to the questions as comments where they appear.

## Step 1 ðŸ§©

Recall the Latin alphabet variable from the previous exercise.

### Answer ðŸ”‘

```jsx
const alphabet = "abcdefghijklmnopqrstuvwxyz";
```

## Step 2 ðŸ§©

Use a loop to iterate through each letter of "BRUTUS". Employ the Caesar Cipher technique to shift each letter by the given value. Store the encrypted name in a variable.

### Hints ðŸ’¡

- Use a `for` loop to traverse each letter of the name.
- Remember to handle cases where the shift might go beyond "z".

### Answer ðŸ”‘

```jsx
let encryptedName = "";

for (let i = 0; i < friend.length; i++)
{
  const currentLetter = friend[i];
  const currentIndex = alphabet.indexOf(currentLetter.toLowerCase());
  const newIndex = (currentIndex + shiftValue) % alphabet.length;
  encryptedName += alphabet[newIndex].toUpperCase();
}
```

## Question 1 ðŸ¤”

What advantage does using a loop provide over manually encrypting each letter?

### Answer ðŸ”‘

Using a loop provides automation, enabling us to process each letter of the name consecutively without redundant code. It ensures consistent encryption and can easily adapt to names of any length.

## Question 2 ðŸ¤”

Explain the role of `% alphabet.length` in our loop. How does it aid in the encryption process?

### Answer ðŸ”‘

The modulus operator, `%`, ensures that if the sum of the current index and the shift value surpasses the alphabet's length, it wraps around to the start. Thus, after "z", we return to "a", guaranteeing continuous encryption.